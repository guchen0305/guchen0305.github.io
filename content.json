[{"title":"","date":"2017-03-16T06:48:49.000Z","path":"2017/03/16/css垂直水平居中/","text":"css垂直居中第一种方法 使用绝对定位垂直居中1、父级元素定义使用定位元素 position:relative2、子集元素使用position:absolute 通过top:50%; margin-top:-100px; 图片的1/2高度 如果不知道具体高度 可以使用 transform:translateY(-50%) 如果需要水平垂直居中的话 可以添加left:50% margin-left:-100px 也可以直接使用 transform:translate(-50%,-50%); 垂直水平居中 具体代码如下 &gt;&gt;&gt;html &lt;div id=&quot;app&quot;&gt; &lt; img src=&quot;images/sample.png&quot; &gt; &lt;/div&gt; &gt;&gt;&gt;css &lt;style type=&quot;text/css&quot;&gt; #app{ width: 400px; height: 400px; border: 1px solid #c2c2c2; margin:0 auto; position:relative} #app img{ width: 200px; height: 200px; position: absolute; top:50%; left: 50%; transform:translate(-50%,-50%); } &lt;/style&gt; 效果图如下 第二种方法 使用表格的display: table-cell;w3c对于table-cell的解释 此元素会作为一个表格单元格显示（类似 和 ） vertical-align: middle; 把此元素放置在父元素的中部。1、父级元素定义 display: table-cell; vertical-align: middle;2、子集元素使用 vertical-align: middle;3、如果需要水平居中，可在父级元素中添加 text-align:center;具体代码如下 &gt;&gt;&gt;html &lt;div id=&quot;app1&quot;&gt; &lt;img src=&quot;images/sample.png&quot; &gt; &lt;/div&gt; &gt;&gt;&gt;css &lt;style type=&quot;text/css&quot;&gt; #app1{ width: 400px; height: 400px; margin:0 auto; border: 1px solid #c2c2c2; text-align: center; margin:0 auto; display: table-cell; vertical-align: middle;} #app1 img{ width: 200px; height: 200px; vertical-align: middle; } &lt;/style&gt; 效果图如下 第三种方法 transform:translateY(y)定义转换，只是用 Y 轴的值。1、直接在子元素中定义 transform:translateY(50%) 可垂直居中，效果如图2、如果需要水平居中，可在父级元素中添加 text-align:center;具体代码如下 &gt;&gt;&gt;html &lt;div id=&quot;app2&quot;&gt; &lt;img src=&quot;images/sample.png&quot; &gt; &lt;/div&gt; &gt;&gt;&gt;css &lt;style type=&quot;text/css&quot;&gt; #app2{ width: 400px; height: 400px; margin:0 auto; border: 1px solid #c2c2c2; text-align: center; } #app2 img{ width: 200px; height: 200px; transform:translateY(50%) } &lt;/style&gt; 效果图如下 第四种方法 使用display:flex1、直接在父级元素定义 display:flex;align-items:center;2、如果需要水平居中，可在父级元素中添加 justify-content:center; &gt;&gt;&gt;html &lt;div id=&quot;app3&quot;&gt; &lt;img src=&quot;images/sample.png&quot; &gt; &lt;/div&gt; &gt;&gt;&gt;css &lt;style type=&quot;text/css&quot;&gt; #app3{ width: 400px; height: 400px; margin:0 auto; border: 1px solid #c2c2c2; text-align: center; display:flex;align-items:center; justify-content:center;} #app3 img{ width: 200px; height: 200px; } &lt;/style&gt; 效果图如下","tags":[]},{"title":"","date":"2017-03-16T06:48:49.000Z","path":"2017/03/16/hexo搭建博客/","text":"hexo搭建博客正文： 这边教程是针对与Mac的，参考链接，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。 之前是想着写博客，一方面是给自己做笔记，可以提升自己的写作、总结能力，一个技术点我们会使用，并不难，但是要做到让让别人也能听懂我们讲得，还是需要一定的技巧和经验的。很多类似于CSDN、博客园也都可以写文章，但是页面的样式我，不是太喜欢，简书还算好点得。最近看到一些大神们的博客（在我的友情链接里有），貌似都是用hexo写得，我也依葫芦画瓢的搭建了一个。不罗嗦了，直接上搭建步骤。 &gt; 安装Node（必须） 作用：用来生成静态页面的 到Node.js官网下载相应平台的最新版本，一路安装即可。 安装Git（必须） 作用：把本地的hexo内容提交到github上去. 安装Xcode就自带有Git，我就不多说了。 申请GitHub（必须） 作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。 github账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。 正式安装HEXO Node和Git都安装好后，可执行如下命令安装hexo： $ sudo npm install -g hexo 初始化 创建一个文件夹，如：Blog，cd到Blog里执行hexo init的。命令： hexo init 好啦，至此，全部安装工作已经完成！ 生成静态页面 继续再Blog目录下执行如下命令，生成静态页面 hexo generate （hexo g 也可以） 本地启动 启动本地服务，进行文章预览调试，命令： hexo server 浏览器输入http://localhost:4000 我不知道你们能不能，反正我不能，因为我还有环境没配置好 常见的HEXO配置错误： ERROR Plugin load failed: hexo-server 原因： Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore. 解决方法，执行命令：$ sudo npm install hexo-server 执行命令hexo server，提示：Usage: hexo …. 原因：我认为是没有生成本地服务 解决方法，执行命令：$ npm install hexo-server –save 提示：hexo-server@0.1.2 node_modules/hexo-server…. 表示成功了参考 这个时候再执行：$ hexo-server 得到: INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 这个时候再点击http://0.0.0.0:4000，正常情况下应该是最原始的画面，但是我看到的是： 白板和Cannot GET / 几个字 原因： 由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令： npm install hexo-renderer-ejs –savenpm install hexo-renderer-stylus –savenpm install hexo-renderer-marked –save这个时候再重新生成静态文件，命令： hexo generate （或hexo g）启动本地服务器： hexo server （或hexo s）再点击网址http://0.0.0.0:4000 OK终于可以看到属于你自己的blog啦，?，虽然很简陋，但好歹有了一个属于自己的小窝了。参考链接，本地已经简单的设置好了，但是现在域名和服务器都是基于自己的电脑，接下来需要跟github进行关联。 配置Github建立Repository 建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法 然后建立关联，我的Blog在本地/Users/leopard/Blog，Blog是我之前建的东西也全在这里面，有： Blog ｜ ｜－－ _config.yml ｜－－ node_modules ｜－－ public ｜－－ source ｜－－ db.json ｜－－ package.json ｜－－ scaffolds ｜－－ themes 现在我们需要_config.yml文件，来建立关联，命令： vim _config.yml翻到最下面，改成我这样子的，注意： : 后面要有空格 deploy: type: git repository: https://github.com/leopardpan/leopardpan.github.io.git branch: master执行如下命令才能使用git部署 npm install hexo-deployer-git –save网上会有很多说法，有的type是github, 还有repository 最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。 忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。 然后，执行配置命令： hexo deploy 然后再浏览器中输入http://leopardpan.github.io/就行了，我的 github 的账户叫 leopardpan ,把这个改成你 github 的账户名就行了 部署步骤 每次部署的步骤，可按以下三步来进行。 hexo cleanhexo generatehexo deploy一些常用命令： hexo new “postName” #新建文章hexo new page “pageName” #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help #查看帮助hexo version #查看Hexo的版本这里有大量的主题列表使用方法里面 都有详细的介绍，我就不多说了。我这里有几款个人认为不错的主题，免去你们，一个一个的选了，欢迎吐槽我的审美，? Cover - A chic theme with facebook-like cover photo Oishi - A white theme based on Landscape plus and Writing. Sidebar - Another theme based on Light with a simple sidebar TKL - A responsive design theme for Hexo. 一个设计优雅的响应式主题 Tinnypp - A clean, simple theme based on Tinny Writing - A small and simple hexo theme based on Light Yilia - Responsive and simple style 优雅简洁响应式主题，我用得就是这个。 Pacman voidy - A theme with dynamic tagcloud and dynamic snow 一些基本路径 文章在 source/_posts，编辑器可以用 Sublime，支持 markdown 语法。如果想修改头像可以直接在主题的 _config.yml 文件里面修改，友情链接，之类的都在这里，修改名字在 public/index.html 里修改，开始打理你的博客吧，有什么问题或者建议，都可以提出来，我会继续完善的。 Markdown语法参考链接: 作业部落 Q&amp;A 问：如何让文章想只显示一部分和一个 阅读全文 的按钮？答：在文章中加一个 ， 后面的内容就不会显示出来了。问：本地部署成功了，也能预览效果，但使用 username.github.io 访问，出现 404 .答：首先确认 hexo d 命令执行是否报错，如果没有报错，再查看一下你的 github 的 username.github.io 仓库，你的博客是否已经成功提交了，你的 github 邮箱也要通过验证才行。 转载于地址，如有不便，告侵删，联系方式左边QQ","tags":[]},{"title":"","date":"2017-03-16T06:48:49.000Z","path":"2017/03/16/javascript字符串操作/","text":"JavaScript字符串操作1、charCodeAt方法返回一个整数，代表指定位置字符的Unicode编码。strObj.charCodeAt(index)说明：index将被处理字符的从零开始计数的编号。有效值为0到字符串长度减1的数字。如果指定位置没有字符，将返回NaN。例如：var str = “ABC”;str.charCodeAt(0);结果：652、fromCharCode方法从一些Unicode字符串中返回一个字符串。String.fromCharCode([code1[,code2…]])说明：code1，code2…是要转换为字符串的Unicode字符串序列。如果没有参数，结果为空字符串。例如：String.fromCharCode(65,66,112);结果：ABp 3、charAt方法返回指定索引位置处的字符。如果超出有效范围的索引值返回空字符串。strObj.charAt(index)说明：index想得到的字符的基于零的索引。有效值是0与字符串长度减一之间的值。例如：var str = “ABC”;str.charAt(1);结果：B4、slice方法返回字符串的片段。strObj.slice(start[,end])说明：start下标从0开始的strObj指定部分其实索引。如果start为负，将它作为length+start处理，此处length为字符串的长度。end小标从0开始的strObj指定部分结束索引。如果end为负，将它作为length+end处理，此处length为字符串的长度。例如：012345var str = “ABCDEF”;str.slice(2,4);结果：CD5、substring方法返回位于String对象中指定位置的子字符串。strObj.substring(start,end)说明：start指明子字符串的起始位置，该索引从0开始起算。end指明子字符串的结束位置，该索引从0开始起算。substring方法使用start和end两者中的较小值作为子字符串的起始点。如果start或end为NaN或者为负数，那么将其替换为0。例如：012345var str = “ABCDEF”;str.substring(2,4); // 或 str.substring(4,2);结果：CD6、substr方法返回一个从指定位置开始的指定长度的子字符串。strObj.substr(start[,length])说明：start所需的子字符串的起始位置。字符串中的第一个字符的索引为0。length在返回的子字符串中应包括的字符个数。例如：012345var str = “ABCDEF”;str.substr(2,4);结果：CDEF7、indexOf方法放回String对象内第一次出现子字符串位置。如果没有找到子字符串，则返回-1。strObj.indexOf(substr[,startIndex])说明：substr要在String对象中查找的子字符串。startIndex该整数值指出在String对象内开始查找的索引。如果省略，则从字符串的开始处查找。例如：01234567var str = “ABCDECDF”;str.indexOf(“CD”，1); // 由1位置从左向右查找 123…结果：28、lastIndexOf方法返回String对象中字符串最后出现的位置。如果没有匹配到子字符串，则返回-1。strObj.lastIndexOf(substr[,startindex])说明：substr要在String对象内查找的子字符串。startindex该整数值指出在String对象内进行查找的开始索引位置。如果省略，则查找从字符串的末尾开始。例如：01234567var str = “ABCDECDF”;str.lastIndexOf(“CD”,6); // 由6位置从右向左查找 …456结果：59、search方法返回与正则表达式查找内容匹配的第一个字符串的位置。strObj.search(reExp)说明：reExp包含正则表达式模式和可用标志的正则表达式对象。例如：var str = “ABCDECDF”;str.search(“CD”); // 或 str.search(/CD/i);结果：210、concat方法返回字符串值，该值包含了两个或多个提供的字符串的连接。str.concat([string1[,string2…]])说明：string1，string2要和所有其他指定的字符串进行连接的String对象或文字。例如：var str = “ABCDEF”;str.concat(“ABCDEF”,”ABC”);结果：ABCDEFABCDEFABC11、将一个字符串分割为子字符串，然后将结果作为字符串数组返回。strObj.split([separator[,limit]])说明：separator字符串或 正则表达式 对象，它标识了分隔字符串时使用的是一个还是多个字符。如果忽略该选项，返回包含整个字符串的单一元素数组。limit该值用来限制返回数组中的元素个数。例如：var str = “AA BB CC DD EE FF”;alert(str.split(“ “，3));结果：AA,BB,CC12、toLowerCase方法返回一个字符串，该字符串中的字母被转换成小写。例如：var str = “ABCabc”;str.toLowerCase();结果：abcabc13、toUpperCase方法返回一个字符串，该字符串中的所有字母都被转换为大写字母。例如：var str = “ABCabc”;str.toUpperCase();结果：ABCABC","tags":[]},{"title":"","date":"2017-03-16T06:48:49.000Z","path":"2017/03/16/gulp压缩css/","text":"gulp 压缩css （简单入门） 安装Node（必须） 作用：用来生成静态页面的 到Node.js官网下载相应平台的最新版本，一路安装即可。正式安装 一、全局安装gulpnpm install –global gulp 或者二、进入你的文件目录 例如 cd/d/project 文件夹 在当前文件夹安装确保根目录下面有 package.json文件如果没有，使用 npm init 命令自动生成执行命令之后你会看到如下信息This utility will walk you through creating a package.json file.It only covers the most common items, and tries to guess sensible defaults. See npm help json for definitive documentation on these fieldsand exactly what they do. Use npm install &lt;pkg&gt; --save afterwards to install a package andsave it as a dependency in the package.json file. Press ^C at any time to quit.name: (Other) name 必须填写，其他可以忽略 一直回车 根目录会生成 package.json 三、作为项目的开发依赖（devDependencies）安装：$ npm install –save-dev gulp 四、安装 gulp-minify-css 模块 在命令行输入npm install gulp-minify-css 安装成功后你会看到如下信息：(安装时间可能会比较长取决于网络)-- gulp-minify-css@1.2.4 +-- clean-css@3.4.19 | +-- commander@2.8.1 | |– graceful-readlink@1.0.1| -- source-map@0.4.4 |– amdefine@1.0.0+– object-assign@4.1.0-- vinyl-bufferstream@1.0.1– bufferstreams@1.0.1-- readable-stream@1.1.14– isarray@0.0.1 五、在对应目录创建 gulpfile.js 文件并写入如下内容：// 获取 gulpvar gulp = require(‘gulp’) // 获取 minify-css 模块（用于压缩 CSS）var minifyCSS = require(‘gulp-minify-css’) // 压缩 css 文件// 在命令行使用 gulp css 启动此任务gulp.task(‘mincss’, function () {// 1. 找到文件gulp.src(‘css/*.css’)// 2. 压缩文件.pipe(minifyCSS())// 3. 另存为压缩文件，该路径自动生成，无需新建.pipe(gulp.dest(‘dist/css’))}) // 在命令行使用 gulp swatch 启动此任务gulp.task(‘swatch’, function () {// 监听文件修改，当文件被修改则执行 css 任务gulp.watch(‘css/*.css’, [‘mincss’])}); // 使用 gulp.task(‘default’) 定义默认任务// 在命令行使用 gulp 启动 mincss 任务和 swatch 任务gulp.task(‘default’, [‘mincssss’, ‘swatch’]) 六、创建 css 文件 在根目录创建 css 文件夹，并在 css/ 目录下创建 index.css 文件。 / index.css / body{ background:blue;}.content{ width:1200px;} 七、运行 gulp 查看效果 在命令行输入 gulp +回车gulp 实现效果，gulp 会创建 dist/css 目录，并创建 a.css 文件，此文件存放压缩后的 css 代码。 dist/css/index.css,修改css文件，压缩的css也会相对应改变，html引入的是 压缩后的css","tags":[]},{"title":"","date":"2017-03-16T06:48:49.000Z","path":"2017/03/16/gulp热更新/","text":"gulp热更新 安装Node（必须） 作用：用来生成静态页面的 到Node.js官网下载相应平台的最新版本，一路安装即可。正式安装 一、全局安装gulpnpm install –global gulp 或者二、进入你的文件目录 例如 cd/d/project 文件夹 在当前文件夹安装确保根目录下面有 package.json文件如果没有，使用 npm init 命令自动生成 执行命令之后你会看到如下信息This utility will walk you through creating a package.json file.It only covers the most common items, and tries to guess sensible defaults. See npm help json for definitive documentation on these fieldsand exactly what they do. Use npm install &lt;pkg&gt; --save afterwards to install a package andsave it as a dependency in the package.json file. Press ^C at any time to quit.name: (Other) name 必须填写，其他可以忽略 一直回车 根目录会生成 package.json 三、作为项目的开发依赖（devDependencies）安装： 复制以下代码到package.json { “name”: “guijitu”, “version”: “1.0.0”, “description”: “”, “main”: “index.js”, “scripts”: { “test”: “echo \\”Error: no test specified\\” &amp;&amp; exit 1” }, “author”: “”, “license”: “ISC”, “devDependencies”: { “gulp-livereload”: “^3.8.1”, “gulp-minify-css”: “^1.2.4” }, “dependencies”: { “gulp”: “^3.9.1”, “gulp-connect”: “^5.0.0” }} 命令窗口执行 npm install 安装依赖 四、package.json同级文件夹 新建gulpfile.js文件 内容如下 var gulp = require(‘gulp’), connect = require(‘gulp-connect’),//使用connect启动一个Web服务器 minifyCSS = require(‘gulp-minify-css’); var src = { html: [&apos;./*.html&apos;, &apos;*.html&apos;], css:[&apos;css/*.css&apos;, &apos;./css/*.css&apos;], } gulp.task(&apos;connect&apos;, function() { connect.server({ port: 8888, root: &apos;./&apos;, //当前项目主目录 livereload: true //自动刷新 }); }); gulp.task(&apos;mincss&apos;,function(){ gulp.src(src.css) .pipe(minifyCSS()) .pipe(gulp.dest(&apos;dist/css&apos;)) .pipe(connect.reload()) }) gulp.task(&apos;html&apos;, function() { gulp.src(src.html) .pipe(connect.reload()); }); gulp.task(&apos;watch&apos;, function() { gulp.watch(&apos;./css/*.css&apos;, [&apos;mincss&apos;]); //监控css文件 gulp.watch(&apos;js/*.js&apos;, [&apos;html&apos;]); //监控js文件 gulp.watch([&apos;*.html&apos;], [&apos;html&apos;]); //监控html文件 }); //执行gulp server开启服务器 gulp.task(&apos;server&apos;, [&apos;connect&apos;, &apos;watch&apos;]); 命令窗口执行 gulp server,执行成功可以通过 localhost:8888访问，默认是访问当前文件夹的index.html,如需访问reg.html，则为localhost:8888/reg.html","tags":[]},{"title":"","date":"2016-03-09T15:51:02.000Z","path":"2016/03/09/git部署ssh/","text":"git部署ssh首先安装git环境git安装教程 git是分布式的代码管理工具，远程的代码管理是基于SSH的，所以要使用远程的Git则需要SSH的配置。github的SSH配置如下： 一、设置Git的用户名和电子邮件： git config --global user.name“jayson”(github昵称) git config --global user.email“jayson@gmail.com”(github注册账号) 二，生成SSH密钥过程： 1、查看密钥是否存在 cd〜/ .ssh 如果没有密钥则不会有此文件夹，有则备份删除 2、生存密钥： $ ssh-keygen -t rsa -C“ jayson@gmail.com” (github注册账号) 重点：直接连续按3个回车，密码为空。 您的身份信息已保存在/home/tekkub/.ssh/id_rsa中。 您的公钥已保存在/home/tekkub/.ssh/id_rsa.pub中。 最后得到了两个文件：id_rsa和id_rsa.pub 3、查看密钥&lt;br&gt; mac查看密钥： cd .ssh/（进入密钥文件） ls –a(查看当前文件下所有文件) cat id_rsa.pub(获取密钥内容，第三步第五小节需要用到) window查看密钥： 1、在C:\\Documents and Settings\\Administrator\\下产生两个文件：id_rsa和id_rsa.pub 2、 把1中生成的密钥文件复制到C:\\Documents and Settings\\Administrator\\.ssh\\目录下。 用记事本打开id_rsa.pub，(获取密钥内容，第三步第五小节需要用到) 三、 配置密钥 如果还没有注册github账号可以阅读以下教程 进入github网站，登录你的账号 点击头像右边的三角形，选择settings 点击下图红框内SSH and GPG keys 选择下图右上角的 new SSH key 按钮 添加你的密钥 下图的 title 可以任意填写（建议填一些有意义的标题） key里面的内容需要用到之前id_rsa.pub里面的内容， 详情请看第二步，第三小结-----&gt;查看密钥 复制id_rsa.pub的内容到 key 这个框里面，然后add SSH 如下图所示，说明密钥配置成功","tags":[]}]