[{"title":"","date":"2017-03-16T06:48:49.000Z","path":"2017/03/16/hexo搭建博客/","text":"hexo搭建博客正文： 这边教程是针对与Mac的，参考链接，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。 之前是想着写博客，一方面是给自己做笔记，可以提升自己的写作、总结能力，一个技术点我们会使用，并不难，但是要做到让让别人也能听懂我们讲得，还是需要一定的技巧和经验的。很多类似于CSDN、博客园也都可以写文章，但是页面的样式我，不是太喜欢，简书还算好点得。最近看到一些大神们的博客（在我的友情链接里有），貌似都是用hexo写得，我也依葫芦画瓢的搭建了一个。不罗嗦了，直接上搭建步骤。 &gt; 安装Node（必须） 作用：用来生成静态页面的 到Node.js官网下载相应平台的最新版本，一路安装即可。 安装Git（必须） 作用：把本地的hexo内容提交到github上去. 安装Xcode就自带有Git，我就不多说了。 申请GitHub（必须） 作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。 github账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。 正式安装HEXO Node和Git都安装好后，可执行如下命令安装hexo： $ sudo npm install -g hexo 初始化 创建一个文件夹，如：Blog，cd到Blog里执行hexo init的。命令： hexo init 好啦，至此，全部安装工作已经完成！ 生成静态页面 继续再Blog目录下执行如下命令，生成静态页面 hexo generate （hexo g 也可以） 本地启动 启动本地服务，进行文章预览调试，命令： hexo server 浏览器输入http://localhost:4000 我不知道你们能不能，反正我不能，因为我还有环境没配置好 常见的HEXO配置错误： ERROR Plugin load failed: hexo-server 原因： Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore. 解决方法，执行命令：$ sudo npm install hexo-server 执行命令hexo server，提示：Usage: hexo …. 原因：我认为是没有生成本地服务 解决方法，执行命令：$ npm install hexo-server –save 提示：hexo-server@0.1.2 node_modules/hexo-server…. 表示成功了参考 这个时候再执行：$ hexo-server 得到: INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 这个时候再点击http://0.0.0.0:4000，正常情况下应该是最原始的画面，但是我看到的是： 白板和Cannot GET / 几个字 原因： 由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令： npm install hexo-renderer-ejs –savenpm install hexo-renderer-stylus –savenpm install hexo-renderer-marked –save这个时候再重新生成静态文件，命令： hexo generate （或hexo g）启动本地服务器： hexo server （或hexo s）再点击网址http://0.0.0.0:4000 OK终于可以看到属于你自己的blog啦，?，虽然很简陋，但好歹有了一个属于自己的小窝了。参考链接，本地已经简单的设置好了，但是现在域名和服务器都是基于自己的电脑，接下来需要跟github进行关联。 配置Github建立Repository 建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法 然后建立关联，我的Blog在本地/Users/leopard/Blog，Blog是我之前建的东西也全在这里面，有： Blog ｜ ｜－－ _config.yml ｜－－ node_modules ｜－－ public ｜－－ source ｜－－ db.json ｜－－ package.json ｜－－ scaffolds ｜－－ themes 现在我们需要_config.yml文件，来建立关联，命令： vim _config.yml翻到最下面，改成我这样子的，注意： : 后面要有空格 deploy: type: git repository: https://github.com/leopardpan/leopardpan.github.io.git branch: master执行如下命令才能使用git部署 npm install hexo-deployer-git –save网上会有很多说法，有的type是github, 还有repository 最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。 忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。 然后，执行配置命令： hexo deploy 然后再浏览器中输入http://leopardpan.github.io/就行了，我的 github 的账户叫 leopardpan ,把这个改成你 github 的账户名就行了 部署步骤 每次部署的步骤，可按以下三步来进行。 hexo cleanhexo generatehexo deploy一些常用命令： hexo new “postName” #新建文章hexo new page “pageName” #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help #查看帮助hexo version #查看Hexo的版本这里有大量的主题列表使用方法里面 都有详细的介绍，我就不多说了。我这里有几款个人认为不错的主题，免去你们，一个一个的选了，欢迎吐槽我的审美，? Cover - A chic theme with facebook-like cover photo Oishi - A white theme based on Landscape plus and Writing. Sidebar - Another theme based on Light with a simple sidebar TKL - A responsive design theme for Hexo. 一个设计优雅的响应式主题 Tinnypp - A clean, simple theme based on Tinny Writing - A small and simple hexo theme based on Light Yilia - Responsive and simple style 优雅简洁响应式主题，我用得就是这个。 Pacman voidy - A theme with dynamic tagcloud and dynamic snow 一些基本路径 文章在 source/_posts，编辑器可以用 Sublime，支持 markdown 语法。如果想修改头像可以直接在主题的 _config.yml 文件里面修改，友情链接，之类的都在这里，修改名字在 public/index.html 里修改，开始打理你的博客吧，有什么问题或者建议，都可以提出来，我会继续完善的。 Markdown语法参考链接: 作业部落 Q&amp;A 问：如何让文章想只显示一部分和一个 阅读全文 的按钮？答：在文章中加一个 ， 后面的内容就不会显示出来了。问：本地部署成功了，也能预览效果，但使用 username.github.io 访问，出现 404 .答：首先确认 hexo d 命令执行是否报错，如果没有报错，再查看一下你的 github 的 username.github.io 仓库，你的博客是否已经成功提交了，你的 github 邮箱也要通过验证才行。 转载于:http://leopardpan.github.io","tags":[]},{"title":"","date":"2017-03-16T06:48:49.000Z","path":"2017/03/16/gulp/","text":"gulp 压缩css （简单入门）&gt; 安装Node（必须） 作用：用来生成静态页面的 到Node.js官网下载相应平台的最新版本，一路安装即可。 正式安装 一、 全局安装gulp npm install --global gulp 或者 二、 进入你的文件目录 例如 cd/d/project 文件夹 在当前文件夹安装 确保根目录下面有 package.json文件如果没有，使用 npm init 命令自动生成 &lt;!--more--&gt; 执行命令之后你会看到如下信息 This utility will walk you through creating a package.json file. It only covers the most common items, and tries to guess sensible defaults. See `npm help json` for definitive documentation on these fields and exactly what they do. Use `npm install &lt;pkg&gt; --save` afterwards to install a package and save it as a dependency in the package.json file. Press ^C at any time to quit. name: (Other) name 必须填写，其他可以忽略 一直回车 根目录会生成 package.json 三、 作为项目的开发依赖（devDependencies）安装： $ npm install --save-dev gulp 四、安装 gulp-minify-css 模块 在命令行输入 npm install gulp-minify-css 安装成功后你会看到如下信息：(安装时间可能会比较长取决于网络) `-- gulp-minify-css@1.2.4 +-- clean-css@3.4.19 | +-- commander@2.8.1 | | `-- graceful-readlink@1.0.1 | `-- source-map@0.4.4 | `-- amdefine@1.0.0 +-- object-assign@4.1.0 `-- vinyl-bufferstream@1.0.1 `-- bufferstreams@1.0.1 `-- readable-stream@1.1.14 `-- isarray@0.0.1 五、在对应目录创建 gulpfile.js 文件并写入如下内容： // 获取 gulp var gulp = require(&apos;gulp&apos;) // 获取 minify-css 模块（用于压缩 CSS） var minifyCSS = require(&apos;gulp-minify-css&apos;) // 压缩 css 文件 // 在命令行使用 gulp css 启动此任务 gulp.task(&apos;css&apos;, function () { // 1. 找到文件 gulp.src(&apos;css/*.css&apos;) // 2. 压缩文件 .pipe(minifyCSS()) // 3. 另存为压缩文件，该路径自动生成，无需新建 .pipe(gulp.dest(&apos;dist/css&apos;)) }) // 在命令行使用 gulp auto 启动此任务 gulp.task(&apos;auto&apos;, function () { // 监听文件修改，当文件被修改则执行 css 任务 gulp.watch(&apos;css/*.css&apos;, [&apos;css&apos;]) }); // 使用 gulp.task(&apos;default&apos;) 定义默认任务 // 在命令行使用 gulp 启动 css 任务和 auto 任务 gulp.task(&apos;default&apos;, [&apos;css&apos;, &apos;auto&apos;]) 六、创建 css 文件 在根目录创建 css 文件夹，并在 css/ 目录下创建 index.css 文件。 /* index.css */ body{ background:blue; } .content{ width:1200px; } 七、运行 gulp 查看效果 在命令行输入 gulp +回车 gulp 实现效果，gulp 会创建 dist/css 目录，并创建 a.css 文件，此文件存放压缩后的 css 代码。 dist/css/index.css,修改css文件，压缩的css也会相对应改变，html引入的是 压缩后的css","tags":[]},{"title":"","date":"2016-03-09T15:51:02.000Z","path":"2016/03/09/github配置密钥/","text":"git部署ssh首先你需要安装gitgit安装教程 git是分布式的代码管理工具，远程的代码管理是基于SSH的，所以要使用远程的Git则需要SSH的配置。github的SSH配置如下： 一、设置Git的用户名和电子邮件： git config --global user.name“jayson”(github昵称) git config --global user.email“jayson@gmail.com”(github注册账号) 二，生成SSH密钥过程： 1、查看密钥是否存在 cd〜/ .ssh 如果没有密钥则不会有此文件夹，有则备份删除 2、生存密钥： $ ssh-keygen -t rsa -C“ jayson@gmail.com” (github注册账号) 重点：直接连续按3个回车，密码为空。 您的身份信息已保存在/home/tekkub/.ssh/id_rsa中。 您的公钥已保存在/home/tekkub/.ssh/id_rsa.pub中。 最后得到了两个文件：id_rsa和id_rsa.pub 3、查看密钥&lt;br&gt; mac查看密钥： cd .ssh/（进入密钥文件） ls –a(查看当前文件下所有文件) cat id_rsa.pub(获取密钥内容，第三步第五小节需要用到) window查看密钥： 1、在C:\\Documents and Settings\\Administrator\\下产生两个文件：id_rsa和id_rsa.pub 2、 把1中生成的密钥文件复制到C:\\Documents and Settings\\Administrator\\.ssh\\目录下。 用记事本打开id_rsa.pub，(获取密钥内容，第三步第五小节需要用到) 三、 配置密钥 如果还没有注册github账号可以阅读以下教程 进入github网站，登录你的账号 点击头像右边的三角形，选择settings 点击下图红框内SSH and GPG keys 选择下图右上角的 new SSH key 按钮 添加你的密钥 下图的 title 可以任意填写（建议填一些有意义的标题） key里面的内容需要用到之前id_rsa.pub里面的内容， 详情请看第二步，第三小结-----&gt;查看密钥 复制id_rsa.pub的内容到 key 这个框里面，然后add SSH 如下图所示，说明密钥配置成功","tags":[]}]